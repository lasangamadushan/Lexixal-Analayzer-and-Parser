State 100 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: declaration-list

    2 declaration-list: declaration-list declaration
    3                 | declaration

    4 declaration: var-declaration
    5            | fun-declaration

    6 var-declaration: type-specifier ID ';'
    7                | type-specifier ID '[' NUM ']' ';'

    8 type-specifier: INT
    9               | VOID

   10 fun-declaration: type-specifier ID '(' params ')' compound-stmt

   11 params: param-list
   12       | VOID

   13 param-list: param-list ',' param
   14           | param

   15 param: type-specifier ID
   16      | type-specifier ID '[' ']'

   17 compound-stmt: '{' local-declarations statement-list '}'

   18 local-declarations: local-declarations var-declaration
   19                   | empty

   20 statement-list: statement-list statement
   21               | empty

   22 statement: expression-stmt
   23          | compound-stmt
   24          | selection-stmt
   25          | iteration-stmt
   26          | return-stmt

   27 expression-stmt: expression ';'
   28                | ';'

   29 selection-stmt: IF '(' expression ')' statement
   30               | IF '(' expression ')' statement ELSE statement

   31 iteration-stmt: WHILE '(' expression ')' statement

   32 return-stmt: RETURN ';'
   33            | RETURN expression ';'

   34 expression: var '=' expression
   35           | simple-expression

   36 var: ID
   37    | ID '[' expression ']'

   38 simple-expression: additive-expression relop additive-expression
   39                  | additive-expression

   40 relop: '<'
   41      | GE
   42      | '>'
   43      | LE
   44      | EQ
   45      | NE

   46 additive-expression: additive-expression addop term
   47                    | term

   48 addop: '+'
   49      | '-'

   50 term: term mulop factor
   51     | factor

   52 mulop: '*'
   53      | '/'

   54 factor: '(' expression ')'
   55       | var
   56       | call
   57       | NUM

   58 call: ID '(' args ')'

   59 args: arg-list
   60     | empty

   61 arg-list: arg-list ',' expression
   62         | expression

   63 empty: %empty


Terminals, with rules where they appear

$end (0) 0
'(' (40) 10 29 30 31 54 58
')' (41) 10 29 30 31 54 58
'*' (42) 52
'+' (43) 48
',' (44) 13 61
'-' (45) 49
'/' (47) 53
';' (59) 6 7 27 28 32 33
'<' (60) 40
'=' (61) 34
'>' (62) 42
'[' (91) 7 16 37
']' (93) 7 16 37
'{' (123) 17
'}' (125) 17
error (256)
ELSE (258) 30
IF (259) 29 30
INT (260) 8
RETURN (261) 32 33
VOID (262) 9 12
WHILE (263) 31
ID (264) 6 7 10 15 16 36 37 58
NUM (265) 7 57
GE (266) 41
LE (267) 43
EQ (268) 44
NE (269) 45


Nonterminals, with rules where they appear

$accept (30)
    on left: 0
program (31)
    on left: 1, on right: 0
declaration-list (32)
    on left: 2 3, on right: 1 2
declaration (33)
    on left: 4 5, on right: 2 3
var-declaration (34)
    on left: 6 7, on right: 4 18
type-specifier (35)
    on left: 8 9, on right: 6 7 10 15 16
fun-declaration (36)
    on left: 10, on right: 5
params (37)
    on left: 11 12, on right: 10
param-list (38)
    on left: 13 14, on right: 11 13
param (39)
    on left: 15 16, on right: 13 14
compound-stmt (40)
    on left: 17, on right: 10 23
local-declarations (41)
    on left: 18 19, on right: 17 18
statement-list (42)
    on left: 20 21, on right: 17 20
statement (43)
    on left: 22 23 24 25 26, on right: 20 29 30 31
expression-stmt (44)
    on left: 27 28, on right: 22
selection-stmt (45)
    on left: 29 30, on right: 24
iteration-stmt (46)
    on left: 31, on right: 25
return-stmt (47)
    on left: 32 33, on right: 26
expression (48)
    on left: 34 35, on right: 27 29 30 31 33 34 37 54 61 62
var (49)
    on left: 36 37, on right: 34 55
simple-expression (50)
    on left: 38 39, on right: 35
relop (51)
    on left: 40 41 42 43 44 45, on right: 38
additive-expression (52)
    on left: 46 47, on right: 38 39 46
addop (53)
    on left: 48 49, on right: 46
term (54)
    on left: 50 51, on right: 46 47 50
mulop (55)
    on left: 52 53, on right: 50
factor (56)
    on left: 54 55 56 57, on right: 50 51
call (57)
    on left: 58, on right: 56
args (58)
    on left: 59 60, on right: 58
arg-list (59)
    on left: 61 62, on right: 59 61
empty (60)
    on left: 63, on right: 19 21 60


State 0

    0 $accept: . program $end

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    program           go to state 3
    declaration-list  go to state 4
    declaration       go to state 5
    var-declaration   go to state 6
    type-specifier    go to state 7
    fun-declaration   go to state 8


State 1

    8 type-specifier: INT .

    $default  reduce using rule 8 (type-specifier)


State 2

    9 type-specifier: VOID .

    $default  reduce using rule 9 (type-specifier)


State 3

    0 $accept: program . $end

    $end  shift, and go to state 9


State 4

    1 program: declaration-list .
    2 declaration-list: declaration-list . declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 1 (program)

    declaration      go to state 10
    var-declaration  go to state 6
    type-specifier   go to state 7
    fun-declaration  go to state 8


State 5

    3 declaration-list: declaration .

    $default  reduce using rule 3 (declaration-list)


State 6

    4 declaration: var-declaration .

    $default  reduce using rule 4 (declaration)


State 7

    6 var-declaration: type-specifier . ID ';'
    7                | type-specifier . ID '[' NUM ']' ';'
   10 fun-declaration: type-specifier . ID '(' params ')' compound-stmt

    ID  shift, and go to state 11


State 8

    5 declaration: fun-declaration .

    $default  reduce using rule 5 (declaration)


State 9

    0 $accept: program $end .

    $default  accept


State 10

    2 declaration-list: declaration-list declaration .

    $default  reduce using rule 2 (declaration-list)


State 11

    6 var-declaration: type-specifier ID . ';'
    7                | type-specifier ID . '[' NUM ']' ';'
   10 fun-declaration: type-specifier ID . '(' params ')' compound-stmt

    ';'  shift, and go to state 12
    '('  shift, and go to state 13
    '['  shift, and go to state 14


State 12

    6 var-declaration: type-specifier ID ';' .

    $default  reduce using rule 6 (var-declaration)


State 13

   10 fun-declaration: type-specifier ID '(' . params ')' compound-stmt

    INT   shift, and go to state 1
    VOID  shift, and go to state 15

    type-specifier  go to state 16
    params          go to state 17
    param-list      go to state 18
    param           go to state 19


State 14

    7 var-declaration: type-specifier ID '[' . NUM ']' ';'

    NUM  shift, and go to state 20


State 15

    9 type-specifier: VOID .
   12 params: VOID .

    ')'       reduce using rule 12 (params)
    $default  reduce using rule 9 (type-specifier)


State 16

   15 param: type-specifier . ID
   16      | type-specifier . ID '[' ']'

    ID  shift, and go to state 21


State 17

   10 fun-declaration: type-specifier ID '(' params . ')' compound-stmt

    ')'  shift, and go to state 22


State 18

   11 params: param-list .
   13 param-list: param-list . ',' param

    ','  shift, and go to state 23

    $default  reduce using rule 11 (params)


State 19

   14 param-list: param .

    $default  reduce using rule 14 (param-list)


State 20

    7 var-declaration: type-specifier ID '[' NUM . ']' ';'

    ']'  shift, and go to state 24


State 21

   15 param: type-specifier ID .
   16      | type-specifier ID . '[' ']'

    '['  shift, and go to state 25

    $default  reduce using rule 15 (param)


State 22

   10 fun-declaration: type-specifier ID '(' params ')' . compound-stmt

    '{'  shift, and go to state 26

    compound-stmt  go to state 27


State 23

   13 param-list: param-list ',' . param

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    type-specifier  go to state 16
    param           go to state 28


State 24

    7 var-declaration: type-specifier ID '[' NUM ']' . ';'

    ';'  shift, and go to state 29


State 25

   16 param: type-specifier ID '[' . ']'

    ']'  shift, and go to state 30


State 26

   17 compound-stmt: '{' . local-declarations statement-list '}'

    $default  reduce using rule 63 (empty)

    local-declarations  go to state 31
    empty               go to state 32


State 27

   10 fun-declaration: type-specifier ID '(' params ')' compound-stmt .

    $default  reduce using rule 10 (fun-declaration)


State 28

   13 param-list: param-list ',' param .

    $default  reduce using rule 13 (param-list)


State 29

    7 var-declaration: type-specifier ID '[' NUM ']' ';' .

    $default  reduce using rule 7 (var-declaration)


State 30

   16 param: type-specifier ID '[' ']' .

    $default  reduce using rule 16 (param)


State 31

   17 compound-stmt: '{' local-declarations . statement-list '}'
   18 local-declarations: local-declarations . var-declaration

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 63 (empty)

    var-declaration  go to state 33
    type-specifier   go to state 34
    statement-list   go to state 35
    empty            go to state 36


State 32

   19 local-declarations: empty .

    $default  reduce using rule 19 (local-declarations)


State 33

   18 local-declarations: local-declarations var-declaration .

    $default  reduce using rule 18 (local-declarations)


State 34

    6 var-declaration: type-specifier . ID ';'
    7                | type-specifier . ID '[' NUM ']' ';'

    ID  shift, and go to state 37


State 35

   17 compound-stmt: '{' local-declarations statement-list . '}'
   20 statement-list: statement-list . statement

    IF      shift, and go to state 38
    RETURN  shift, and go to state 39
    WHILE   shift, and go to state 40
    ';'     shift, and go to state 41
    '{'     shift, and go to state 26
    '}'     shift, and go to state 42
    '('     shift, and go to state 43
    ID      shift, and go to state 44
    NUM     shift, and go to state 45

    compound-stmt        go to state 46
    statement            go to state 47
    expression-stmt      go to state 48
    selection-stmt       go to state 49
    iteration-stmt       go to state 50
    return-stmt          go to state 51
    expression           go to state 52
    var                  go to state 53
    simple-expression    go to state 54
    additive-expression  go to state 55
    term                 go to state 56
    factor               go to state 57
    call                 go to state 58


State 36

   21 statement-list: empty .

    $default  reduce using rule 21 (statement-list)


State 37

    6 var-declaration: type-specifier ID . ';'
    7                | type-specifier ID . '[' NUM ']' ';'

    ';'  shift, and go to state 12
    '['  shift, and go to state 14


State 38

   29 selection-stmt: IF . '(' expression ')' statement
   30               | IF . '(' expression ')' statement ELSE statement

    '('  shift, and go to state 59


State 39

   32 return-stmt: RETURN . ';'
   33            | RETURN . expression ';'

    ';'  shift, and go to state 60
    '('  shift, and go to state 43
    ID   shift, and go to state 44
    NUM  shift, and go to state 45

    expression           go to state 61
    var                  go to state 53
    simple-expression    go to state 54
    additive-expression  go to state 55
    term                 go to state 56
    factor               go to state 57
    call                 go to state 58


State 40

   31 iteration-stmt: WHILE . '(' expression ')' statement

    '('  shift, and go to state 62


State 41

   28 expression-stmt: ';' .

    $default  reduce using rule 28 (expression-stmt)


State 42

   17 compound-stmt: '{' local-declarations statement-list '}' .

    $default  reduce using rule 17 (compound-stmt)


State 43

   54 factor: '(' . expression ')'

    '('  shift, and go to state 43
    ID   shift, and go to state 44
    NUM  shift, and go to state 45

    expression           go to state 63
    var                  go to state 53
    simple-expression    go to state 54
    additive-expression  go to state 55
    term                 go to state 56
    factor               go to state 57
    call                 go to state 58


State 44

   36 var: ID .
   37    | ID . '[' expression ']'
   58 call: ID . '(' args ')'

    '('  shift, and go to state 64
    '['  shift, and go to state 65

    $default  reduce using rule 36 (var)


State 45

   57 factor: NUM .

    $default  reduce using rule 57 (factor)


State 46

   23 statement: compound-stmt .

    $default  reduce using rule 23 (statement)


State 47

   20 statement-list: statement-list statement .

    $default  reduce using rule 20 (statement-list)


State 48

   22 statement: expression-stmt .

    $default  reduce using rule 22 (statement)


State 49

   24 statement: selection-stmt .

    $default  reduce using rule 24 (statement)


State 50

   25 statement: iteration-stmt .

    $default  reduce using rule 25 (statement)


State 51

   26 statement: return-stmt .

    $default  reduce using rule 26 (statement)


State 52

   27 expression-stmt: expression . ';'

    ';'  shift, and go to state 66


State 53

   34 expression: var . '=' expression
   55 factor: var .

    '='  shift, and go to state 67

    $default  reduce using rule 55 (factor)


State 54

   35 expression: simple-expression .

    $default  reduce using rule 35 (expression)


State 55

   38 simple-expression: additive-expression . relop additive-expression
   39                  | additive-expression .
   46 additive-expression: additive-expression . addop term

    '-'  shift, and go to state 68
    '+'  shift, and go to state 69
    '<'  shift, and go to state 70
    '>'  shift, and go to state 71
    GE   shift, and go to state 72
    LE   shift, and go to state 73
    EQ   shift, and go to state 74
    NE   shift, and go to state 75

    $default  reduce using rule 39 (simple-expression)

    relop  go to state 76
    addop  go to state 77


State 56

   47 additive-expression: term .
   50 term: term . mulop factor

    '*'  shift, and go to state 78
    '/'  shift, and go to state 79

    $default  reduce using rule 47 (additive-expression)

    mulop  go to state 80


State 57

   51 term: factor .

    $default  reduce using rule 51 (term)


State 58

   56 factor: call .

    $default  reduce using rule 56 (factor)


State 59

   29 selection-stmt: IF '(' . expression ')' statement
   30               | IF '(' . expression ')' statement ELSE statement

    '('  shift, and go to state 43
    ID   shift, and go to state 44
    NUM  shift, and go to state 45

    expression           go to state 81
    var                  go to state 53
    simple-expression    go to state 54
    additive-expression  go to state 55
    term                 go to state 56
    factor               go to state 57
    call                 go to state 58


State 60

   32 return-stmt: RETURN ';' .

    $default  reduce using rule 32 (return-stmt)


State 61

   33 return-stmt: RETURN expression . ';'

    ';'  shift, and go to state 82


State 62

   31 iteration-stmt: WHILE '(' . expression ')' statement

    '('  shift, and go to state 43
    ID   shift, and go to state 44
    NUM  shift, and go to state 45

    expression           go to state 83
    var                  go to state 53
    simple-expression    go to state 54
    additive-expression  go to state 55
    term                 go to state 56
    factor               go to state 57
    call                 go to state 58


State 63

   54 factor: '(' expression . ')'

    ')'  shift, and go to state 84


State 64

   58 call: ID '(' . args ')'

    '('  shift, and go to state 43
    ID   shift, and go to state 44
    NUM  shift, and go to state 45

    $default  reduce using rule 63 (empty)

    expression           go to state 85
    var                  go to state 53
    simple-expression    go to state 54
    additive-expression  go to state 55
    term                 go to state 56
    factor               go to state 57
    call                 go to state 58
    args                 go to state 86
    arg-list             go to state 87
    empty                go to state 88


State 65

   37 var: ID '[' . expression ']'

    '('  shift, and go to state 43
    ID   shift, and go to state 44
    NUM  shift, and go to state 45

    expression           go to state 89
    var                  go to state 53
    simple-expression    go to state 54
    additive-expression  go to state 55
    term                 go to state 56
    factor               go to state 57
    call                 go to state 58


State 66

   27 expression-stmt: expression ';' .

    $default  reduce using rule 27 (expression-stmt)


State 67

   34 expression: var '=' . expression

    '('  shift, and go to state 43
    ID   shift, and go to state 44
    NUM  shift, and go to state 45

    expression           go to state 90
    var                  go to state 53
    simple-expression    go to state 54
    additive-expression  go to state 55
    term                 go to state 56
    factor               go to state 57
    call                 go to state 58


State 68

   49 addop: '-' .

    $default  reduce using rule 49 (addop)


State 69

   48 addop: '+' .

    $default  reduce using rule 48 (addop)


State 70

   40 relop: '<' .

    $default  reduce using rule 40 (relop)


State 71

   42 relop: '>' .

    $default  reduce using rule 42 (relop)


State 72

   41 relop: GE .

    $default  reduce using rule 41 (relop)


State 73

   43 relop: LE .

    $default  reduce using rule 43 (relop)


State 74

   44 relop: EQ .

    $default  reduce using rule 44 (relop)


State 75

   45 relop: NE .

    $default  reduce using rule 45 (relop)


State 76

   38 simple-expression: additive-expression relop . additive-expression

    '('  shift, and go to state 43
    ID   shift, and go to state 44
    NUM  shift, and go to state 45

    var                  go to state 91
    additive-expression  go to state 92
    term                 go to state 56
    factor               go to state 57
    call                 go to state 58


State 77

   46 additive-expression: additive-expression addop . term

    '('  shift, and go to state 43
    ID   shift, and go to state 44
    NUM  shift, and go to state 45

    var     go to state 91
    term    go to state 93
    factor  go to state 57
    call    go to state 58


State 78

   52 mulop: '*' .

    $default  reduce using rule 52 (mulop)


State 79

   53 mulop: '/' .

    $default  reduce using rule 53 (mulop)


State 80

   50 term: term mulop . factor

    '('  shift, and go to state 43
    ID   shift, and go to state 44
    NUM  shift, and go to state 45

    var     go to state 91
    factor  go to state 94
    call    go to state 58


State 81

   29 selection-stmt: IF '(' expression . ')' statement
   30               | IF '(' expression . ')' statement ELSE statement

    ')'  shift, and go to state 95


State 82

   33 return-stmt: RETURN expression ';' .

    $default  reduce using rule 33 (return-stmt)


State 83

   31 iteration-stmt: WHILE '(' expression . ')' statement

    ')'  shift, and go to state 96


State 84

   54 factor: '(' expression ')' .

    $default  reduce using rule 54 (factor)


State 85

   62 arg-list: expression .

    $default  reduce using rule 62 (arg-list)


State 86

   58 call: ID '(' args . ')'

    ')'  shift, and go to state 97


State 87

   59 args: arg-list .
   61 arg-list: arg-list . ',' expression

    ','  shift, and go to state 98

    $default  reduce using rule 59 (args)


State 88

   60 args: empty .

    $default  reduce using rule 60 (args)


State 89

   37 var: ID '[' expression . ']'

    ']'  shift, and go to state 99


State 90

   34 expression: var '=' expression .

    $default  reduce using rule 34 (expression)


State 91

   55 factor: var .

    $default  reduce using rule 55 (factor)


State 92

   38 simple-expression: additive-expression relop additive-expression .
   46 additive-expression: additive-expression . addop term

    '-'  shift, and go to state 68
    '+'  shift, and go to state 69

    $default  reduce using rule 38 (simple-expression)

    addop  go to state 77


State 93

   46 additive-expression: additive-expression addop term .
   50 term: term . mulop factor

    '*'  shift, and go to state 78
    '/'  shift, and go to state 79

    $default  reduce using rule 46 (additive-expression)

    mulop  go to state 80


State 94

   50 term: term mulop factor .

    $default  reduce using rule 50 (term)


State 95

   29 selection-stmt: IF '(' expression ')' . statement
   30               | IF '(' expression ')' . statement ELSE statement

    IF      shift, and go to state 38
    RETURN  shift, and go to state 39
    WHILE   shift, and go to state 40
    ';'     shift, and go to state 41
    '{'     shift, and go to state 26
    '('     shift, and go to state 43
    ID      shift, and go to state 44
    NUM     shift, and go to state 45

    compound-stmt        go to state 46
    statement            go to state 100
    expression-stmt      go to state 48
    selection-stmt       go to state 49
    iteration-stmt       go to state 50
    return-stmt          go to state 51
    expression           go to state 52
    var                  go to state 53
    simple-expression    go to state 54
    additive-expression  go to state 55
    term                 go to state 56
    factor               go to state 57
    call                 go to state 58


State 96

   31 iteration-stmt: WHILE '(' expression ')' . statement

    IF      shift, and go to state 38
    RETURN  shift, and go to state 39
    WHILE   shift, and go to state 40
    ';'     shift, and go to state 41
    '{'     shift, and go to state 26
    '('     shift, and go to state 43
    ID      shift, and go to state 44
    NUM     shift, and go to state 45

    compound-stmt        go to state 46
    statement            go to state 101
    expression-stmt      go to state 48
    selection-stmt       go to state 49
    iteration-stmt       go to state 50
    return-stmt          go to state 51
    expression           go to state 52
    var                  go to state 53
    simple-expression    go to state 54
    additive-expression  go to state 55
    term                 go to state 56
    factor               go to state 57
    call                 go to state 58


State 97

   58 call: ID '(' args ')' .

    $default  reduce using rule 58 (call)


State 98

   61 arg-list: arg-list ',' . expression

    '('  shift, and go to state 43
    ID   shift, and go to state 44
    NUM  shift, and go to state 45

    expression           go to state 102
    var                  go to state 53
    simple-expression    go to state 54
    additive-expression  go to state 55
    term                 go to state 56
    factor               go to state 57
    call                 go to state 58


State 99

   37 var: ID '[' expression ']' .

    $default  reduce using rule 37 (var)


State 100

   29 selection-stmt: IF '(' expression ')' statement .
   30               | IF '(' expression ')' statement . ELSE statement

    ELSE  shift, and go to state 103

    ELSE      [reduce using rule 29 (selection-stmt)]
    $default  reduce using rule 29 (selection-stmt)


State 101

   31 iteration-stmt: WHILE '(' expression ')' statement .

    $default  reduce using rule 31 (iteration-stmt)


State 102

   61 arg-list: arg-list ',' expression .

    $default  reduce using rule 61 (arg-list)


State 103

   30 selection-stmt: IF '(' expression ')' statement ELSE . statement

    IF      shift, and go to state 38
    RETURN  shift, and go to state 39
    WHILE   shift, and go to state 40
    ';'     shift, and go to state 41
    '{'     shift, and go to state 26
    '('     shift, and go to state 43
    ID      shift, and go to state 44
    NUM     shift, and go to state 45

    compound-stmt        go to state 46
    statement            go to state 104
    expression-stmt      go to state 48
    selection-stmt       go to state 49
    iteration-stmt       go to state 50
    return-stmt          go to state 51
    expression           go to state 52
    var                  go to state 53
    simple-expression    go to state 54
    additive-expression  go to state 55
    term                 go to state 56
    factor               go to state 57
    call                 go to state 58


State 104

   30 selection-stmt: IF '(' expression ')' statement ELSE statement .

    $default  reduce using rule 30 (selection-stmt)
